#include "math.h"


#define EULER_NUMBER_F 2.71828182846



const float dense_7[7][7] = {{ 0.25797072,  1.6831706 ,  0.05359341, -0.09819391, -0.63826334,
                              -0.33671325, -0.73563653},
                              { 0.54704726, -0.45876497,  0.03761093, -0.47408837,  2.2158973 ,
                               -0.5127937 , -1.2971231 },
                               {-0.46036097, -0.17235896,  0.90637696, -1.3569939 ,  0.20777145,
                                -0.2706466 ,  2.471754  },
                                { 0.1029297 , -0.0542815 , -0.00852078, -0.02271566, -0.68502694,
                                 0.00888738,  0.18442555},
                                 { 0.08844618, -0.15903275, -0.07710955,  0.03106742,  0.20305775,
                                  -0.8045819 ,  0.24480508},
                                  {-2.2770853 , -0.08020699, -2.1473176 ,  0.0267086 ,  0.01558488,
                                   -1.5306846 ,  0.28570986},
                                   {-0.00945443,  0.6148525 , -0.09205035,  0.64901453,  0.01665026,
        -0.81307656,  0.7434832}};


const float bias[7] = {0.9463729 , -0.66778004,  0.06976799,  0.41223976,  0.20860301,
       -0.65274805,  0.18927409};



const float dense_8[7][15] = {{-0.2597556 , -1.3059882 ,  0.78745717,  0.51493365,  0.8227529 ,
        -0.9640378 ,  0.6696767 , -0.40160742, -1.8003958 , -0.13631326,
                               -0.6348587 ,  0.46273947, -0.2969206 ,  1.0757557 , -0.22018912},
{ 0.07208268,  2.1911328 ,  1.5675329 ,  1.0231693 , -0.6886663 ,
        -0.56490815,  1.4538746 ,  0.82063174, -0.9210997 , -1.3933502 ,
        0.6193046 ,  0.45198464, -0.54814655,  0.31905928,  1.3693359 },
{ 0.16526777, -0.08363515,  0.16719927,  1.1864991 , -0.09266762,
        -1.5184911 , -1.3391403 ,  0.13352717,  0.13036898, -0.53956187,
        0.2330948 ,  0.6846054 , -1.2529358 ,  0.47102222, -0.04022137},
{ 1.7859825 ,  0.8001844 ,  0.11897866,  1.6072147 ,  2.6492195 ,
        -1.9408793 , -0.4562432 ,  1.7959214 ,  1.9578011 ,  1.0874246 ,
        -0.93343717,  1.088671  ,  1.0878003 ,  1.3659675 , -0.73365694},
{-1.6049807 , -0.7708248 ,  0.95271915,  0.6691032 ,  0.6441497 ,
        -1.7517476 ,  0.8592952 , -0.4001923 , -2.5964894 , -0.9499123 ,
        0.554991  ,  1.2221484 ,  1.5561861 ,  1.8960959 ,  0.7974874 },
{ 0.45466015,  1.4017421 , -0.16238187, -0.11781891, -1.0399706 ,
        -0.14536741,  0.4051009 ,  1.0163612 ,  0.35491607, -1.7489269 ,
        0.7205214 , -0.22157721, -0.12768336, -0.21323487,  1.8610778 },
{-0.35613826,  1.1930566 , -0.86201113,  0.3475555 , -0.0620762 ,
        -0.55779886, -2.0982223 ,  0.85019076,  1.4353036 , -1.2576296 ,
         0.6937647 , -0.8298653 , -0.42508727, -1.1690171 ,  0.72715074 }};


const float bias1[15] = { -0.7133806 , -1.088117  , -0.00833825, -0.18190257,  0.5466825 ,
        0.35408285, -0.3037397 , -0.6106942 ,  0.1556486 ,  1.3610557 ,
       -0.2300147 ,  0.2446383 ,  0.4269303 ,  0.39531568, -1.4159664  };



const float dense_9[15][4] = {{2.088956  , -0.94817716, -0.17036827,  0.6707257 },
{ 2.1994338 ,  0.23611829,  1.7644256 , -2.1019278 },
{ 1.1834526 ,  2.484407  , -0.43591928, -0.83357114},
{-0.42808512,  2.510949  ,  2.4253583 ,  2.2482076 },
                                  { 0.06500708, -0.90206575, -0.93908304,  8.667721  },
                                   { 0.80115145, -1.9461133 , -1.8985469 , -3.2165332 },
                                    { 1.4038218 ,  1.1846186 , -1.875     , -0.35365313},
                                     { 0.9872842 ,  1.2626331 ,  0.5348209 ,  1.1442935 },
                                      {-1.224889  , -0.9483917 ,  2.3799012 ,  3.2948742 },
                                       {-1.8307661 ,  1.6630685 , -0.27560097,  3.627544  },
                                        {-0.4982251 , -0.87715423,  2.5100563 , -3.8599398 },
                                         {-0.63005686,  4.041979  ,  0.96993834,  0.40016243},
                                          { 0.94478   , -0.1293715 , -3.1908584 ,  2.5014772 },
                                           {-1.6871057 ,  3.3212383 ,  0.4665997 , -0.34324318},
                                            { 2.1950395 , -0.39193463,  0.11950596, -1.2475406 }};
                              
const float bias2[4] = {-1.5391132 ,  0.18809573,  0.28772148,  0.37510958};  
                              
const float test_input[20][7] ={{2.50198930213149,0.439350927051998,2.48548207218913,4.46270844985632,0.437979299603599,2.97579370472236,2.42779734998041},
	{0.224953481291687,0.0591578948752182,0.602966424751168,0.273830529503537,3.02499171823299,2.70892869288254,3.53893831450574},
	{3.34128041389553,0.602692721115502,0.400020475964477,3.82931560737046,3.5671074849897,3.12630353213998,4.73393711196318},
	{2.17655192482015,2.16399848513121,2.60762397175183,2.49228652561193,3.00951002038675,2.10301006956172,4.51720992431126},
	{0.559720280523962,0.36634434746801,0.724544629977762,0.641010440082402,2.31952070757989,2.23330185414082,3.00043385888996},
	{4.27315781515812,4.53206991247133,0.0315961818645098,0.597319924344235,4.1599374900641,3.3087954121267,0.571502003659656},
	{0.772498513516504,4.64595940234057,2.61938414458311,3.75385664047026,2.83013067531399,4.90494814651418,4.6628364149798},
	{0.525645141056299,0.0865338019091946,0.296863857788462,0.303153270370191,3.99470667997045,2.21548681597094,4.49797197525578},
	{4.13369298478893,0.168581931318442,4.62149171535962,2.33383514455161,0.711017560143584,2.519789691746,4.68489968094694},
	{4.45758528479096,0.435873623714479,0.510769428565862,4.62180875413646,3.54083387504983,2.4914252650134,3.28326694687096},
	{0.111697967631273,0.18664601652709,0.457987755263476,0.155734881737423,2.68095654299123,4.42663727065873,0.674601673214305},
	{2.31824541440919,2.15815817197502,3.18040876552552,4.57606458247427,4.31062251778083,4.06848355882073,4.08636788069978},
	{3.14309995813978,2.08915376025929,0.105853631699198,2.96214359549629,2.00649684516174,0.633501822970257,2.14723265908287},
	{3.63737146903211,0.66990344768261,3.51424682224282,2.88455508374377,0.764528037627004,4.9859744200611,4.09216941499024},
	{4.57552818944141,3.59411144932426,2.11621741716333,2.46186997441944,2.99463198936035,0.732412402698918,3.7944437160024},
	{0.619822445397708,3.65536186947519,2.6423169631029,4.29201571651065,3.30768813412371,4.39854630031618,3.67164091499147},
	{0.445872996791149,0.797314425683529,0.372553984435192,0.20824261678695,3.76249460551332,4.83838573472458,3.60834184721916},
	{4.78498132650623,3.76924764436192,0.0749942498949683,0.0826228804037309,4.31682937596116,2.27120655617457,0.18689067065253},
	{0.158693338328967,0.621028093680959,0.712279702805498,0.533141114558088,3.8967233446694,2.49544114357526,0.0534782171488906},
	{0.146862974491457,2.93679211360063,2.47835776385553,2.21417662521272,3.17103345797033,4.46866132131242,4.50674030669954}
};
                              
//y_teste equivalente 
//0,0,1,0
//0,1,1,1
//1,0,0,1
//1,0,0,0
//0,1,1,1
//0,1,0,0
//0,0,0,0
//0,1,1,1
//0,0,1,0
//1,0,0,1
//0,0,0,1
//1,0,0,0
//0,1,0,1
//0,0,1,0
//0,1,1,0
//0,0,0,0                       
//0,1,1,1
//0,1,0,0
//0,0,0,1
//0,0,0,0

                              
void predict(float m1, float m2, float m3, float m4, float m5, float m6, float m7){
	
  	float entries[7] = {m1,m2,m3,m4,m5,m6,m7};
  	
  
    float n1[7] = {0,0,0,0,0,0,0};
    float n2[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    float n3[4] = {0,0,0,0};
  
	float output[4];

  
    int zeros = 0;
    int ones = 0;
  
   //As entradas passarão pela primeira camada dense_7
    for(int i=0;i<7;i++){
        for(int j=0;j<7;j++){
          if(dense_7[i][j] != 0){
            n1[j] += entries[i]*dense_7[i][j];
          }
        }
   	}
  
   //Adiciona o termo bias
    for(int i=0;i<7;i++){
      if(bias[i]!=0){
          n1[i]+=bias[i];
      }
    }
   // Passa pela função de ativação tanh
    for(int i=0;i<7;i++){
        n1[i] = tanh(n1[i]);
    }
  
   // Passa pela segunda camada escondida com 15 neurônios dense_8
    for(int i=0;i<7;i++){
        for(int j=0;j<15;j++){
          if(dense_8[i][j] !=0){
            n2[j] += n1[i]*dense_8[i][j];
          }
       	}
    }
  
  //Adiciona novamente um termo bias1
    for(int i=0;i<15;i++){
      if(bias2[i] !=0){
          n2[i]+=bias1[i];
      }
    }
  
   //Passa pela função de ativação tanh
    for(int i=0;i<15;i++){
        n2[i] = tanh(n2[i]);
    }
  
   //Por fim, passa pela camada de saída de 4 neurônios dense_9
    for(int i=0;i<15;i++){
        for(int j=0;j<4;j++){
          if(dense_9[i][j] !=0){
            n3[j] += n2[i]*dense_9[i][j];
          }
        }
    }
  
   //Adiciona mais um termo bias2
    for(int i=0;i<4;i++){
      if(bias2[i] !=0.){
          n3[i]+=bias2[i];
      }
    }
      
  //sigmoid
    float prediction1 = (1 / (1 + pow(EULER_NUMBER_F, -n3[0])));
    float prediction2 = (1 / (1 + pow(EULER_NUMBER_F, -n3[1])));
    float prediction3 = (1 / (1 + pow(EULER_NUMBER_F, -n3[2])));
    float prediction4 = (1 / (1 + pow(EULER_NUMBER_F, -n3[3])));
  
  // Arredonda os resultados para ficar 0 ou 1
    int bcd_dig1 = roundf(prediction1);
    int bcd_dig2 = roundf(prediction2);
    int bcd_dig3 = roundf(prediction3);
    int bcd_dig4 = roundf(prediction4);

    
  //acende cada led de acordo com o BCD
  	if(bcd_dig1 == 1){
  		PORTD |= 0b10000000;
    }
  	if(bcd_dig2 == 1){
  		PORTD |= 0b01000000;
    }
  	if(bcd_dig3 == 1){
  		PORTD |= 0b00100000;
    }
  	if(bcd_dig4 == 1){
  		PORTD |= 0b00010000;
    }         
}

 
int main() {
  // Inicializa a comunicação serial com uma taxa de 9600 bits por segundo
  Serial.begin(9600); 

  //leds
  DDRD |= 0b11111111;
  PORTD = 0b00000000; 
  
  
  int i = 0;
  
  // Executa o loop infinitamente
  while (true) {
    // Verifica se i é maior que 19 e, se sim, zera i
    if (i > 19) {
      i = 0;
    }
    
    // Obtém os valores das entradas de teste
    float g = test_input[i][0];
    float f = test_input[i][1];
    float e = test_input[i][2];
    float d = test_input[i][3];
    float c = test_input[i][4];
    float b = test_input[i][5];
    float a = test_input[i][6];
    
    // Chama a função de previsão e passa as entradas de teste como argumentos
    predict(g, f, e, d, c, b, a);
    
    // Espera um segundo antes de apagar os leds e incrementar i
    _delay_ms(1000);
    PORTD &= 0b00000000; //apaga todos os leds da porta D
    i+=1;
  	_delay_ms(1000);
  }
  
}


  
  